name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  UV_CACHE_DIR: ${{ github.workspace }}/.cache/uv

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]
    steps:
      - name: Checkout repository
        run: |
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.sha }}
          
      - name: Set up Python environment
        run: |
          sudo apt-get update
          sudo apt-get install -y python${{ matrix.python-version }} python${{ matrix.python-version }}-venv
          python${{ matrix.python-version }} -m venv .venv
          source .venv/bin/activate
          
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          
      - name: Install dependencies
        run: |
          source .venv/bin/activate
          uv sync --all-extras --group test
          
      - name: Create report directories
        run: |
          mkdir -p tests/.reports
          
      - name: Run tests with coverage
        run: |
          source .venv/bin/activate
          uv run pytest \
            -vv \
            --tb=short \
            --durations=5 \
            --cov=src/pdflex \
            --cov-branch \
            --cov-fail-under=0 \
            --cov-report=term-missing:skip-covered \
            --cov-report=json:tests/.reports/coverage.json \
            --asyncio-mode=auto \
            --numprocesses=auto
            
      - name: Verify coverage report
        run: |
          ls -la tests/.reports/coverage.json
          echo "Coverage report size: $(stat -f%z tests/.reports/coverage.json)"
          echo "Coverage report content preview:"
          head -n 20 tests/.reports/coverage.json
        continue-on-error: true
        
      - name: Upload coverage data
        run: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -t ${{ secrets.CODECOV_TOKEN }} -f tests/.reports/coverage.json -F unittests-${{ matrix.python-version }}

  build:
    name: Build Package
    runs-on: ubuntu-latest
    if: success() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Checkout repository
        run: |
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.sha }}
          
      - name: Set up Python
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-venv
          python3 -m venv .venv
          source .venv/bin/activate
          
      - name: Install build tools
        run: |
          source .venv/bin/activate
          curl -LsSf https://astral.sh/uv/install.sh | sh
          uv pip install --system build hatch
          
      - name: Build package
        run: |
          source .venv/bin/activate
          hatch build
          
      - name: Save artifacts
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/artifacts
          cp -r dist/* ${GITHUB_WORKSPACE}/artifacts/

  deploy:
    name: Deploy to PyPI
    needs: [ build ]
    runs-on: ubuntu-latest
    if: success() && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/pdflex
    permissions:
      id-token: write
    steps:
      - name: Download artifacts
        run: |
          mkdir -p dist
          cp -r ${GITHUB_WORKSPACE}/artifacts/* dist/
          
      - name: Upload to PyPI
        run: |
          pip install --user twine
          python -m twine upload --repository pypi dist/* \
            --username __token__ \
            --password ${{ secrets.PYPI_TOKEN }}