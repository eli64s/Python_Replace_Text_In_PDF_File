name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  UV_CACHE_DIR: ${{ github.workspace }}/.cache/uv

jobs:
  test:
    name: Test Python ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]
    steps:
      - name: Initialize Python
        run: |
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.sha }}
          sudo apt-get update
          sudo apt-get install -y python3-full python3-venv python3-pip
          python3 -m venv .venv
          .venv/bin/pip install --upgrade pip

      - name: Setup environment
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="/root/.cargo/bin:$PATH"
          .venv/bin/pip install uv
          .venv/bin/uv sync --all-extras --group test

      - name: Run tests
        run: |
          mkdir -p tests/.reports
          .venv/bin/uv run pytest \
            -vv \
            --tb=short \
            --durations=5 \
            --cov=src/pdflex \
            --cov-branch \
            --cov-fail-under=0 \
            --cov-report=term-missing:skip-covered \
            --cov-report=json:tests/.reports/coverage.json \
            --asyncio-mode=auto \
            --numprocesses=auto

      - name: Upload coverage
        run: |
          curl -Os https://uploader.codecov.io/latest/linux/codecov
          chmod +x codecov
          ./codecov -t ${{ secrets.CODECOV_TOKEN }} -f tests/.reports/coverage.json

  build:
    name: Build Package
    needs: test
    runs-on: ubuntu-latest
    if: success() && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
    steps:
      - name: Initialize environment
        run: |
          git clone https://github.com/${{ github.repository }}.git .
          git checkout ${{ github.sha }}
          sudo apt-get update
          sudo apt-get install -y python3-full python3-venv python3-pip
          python3 -m venv .venv
          .venv/bin/pip install --upgrade pip
          curl -LsSf https://astral.sh/uv/install.sh | sh
          export PATH="/root/.cargo/bin:$PATH"
          .venv/bin/pip install uv

      - name: Build package
        run: |
          .venv/bin/uv pip install --system build hatch
          .venv/bin/hatch build

      - name: Store artifacts
        run: |
          mkdir -p ${GITHUB_WORKSPACE}/artifacts
          cp -r dist/* ${GITHUB_WORKSPACE}/artifacts/

  deploy:
    name: Deploy to PyPI
    needs: build
    runs-on: ubuntu-latest
    if: success() && startsWith(github.ref, 'refs/tags/v')
    environment:
      name: pypi
      url: https://pypi.org/p/pdflex
    permissions:
      id-token: write
    steps:
      - name: Setup deployment
        run: |
          mkdir -p dist
          cp -r ${GITHUB_WORKSPACE}/artifacts/* dist/

      - name: Deploy to PyPI
        run: |
          python3 -m venv .venv
          .venv/bin/pip install --upgrade pip
          .venv/bin/pip install twine
          .venv/bin/python -m twine upload --repository pypi dist/* \
            --username __token__ \
            --password ${{ secrets.PYPI_TOKEN }}